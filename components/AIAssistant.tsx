'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { 
  MessageSquare, 
  Send, 
  Sparkles, 
  Bot, 
  User,
  BarChart3,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Lightbulb,
  Zap,
  Brain,
  Target,
  Search,
  HelpCircle
} from 'lucide-react'
import { DataProfile, ChartSpec, ChartMark } from '@/types'

interface AIAssistantProps {
  dataProfile?: DataProfile
  onChartSuggestion?: (chartSpec: ChartSpec) => void
}

interface Message {
  id: string
  type: 'user' | 'assistant'
  content: string
  timestamp: Date
  suggestions?: string[]
}

const QUICK_PROMPTS = [
  "–Ø–∫–∏–π —á–∞—Ä—Ç –∫—Ä–∞—â–µ? üìä",
  "–ü–æ–∫–∞–∂–∏ —Ç—Ä–µ–Ω–¥–∏ üìà",
  "–ó–Ω–∞–π–¥–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó üîç",
  "–ü–æ—Ä—ñ–≤–Ω—è–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó üìã",
  "–©–æ –ø–æ–∫–∞–∑—É—é—Ç—å –¥–∞–Ω—ñ? ü§î"
]

const QUICK_ACTIONS = [
  { icon: BarChart3, label: 'AI Auto-Analysis üöÄ', action: 'suggest_chart' },
  { icon: Brain, label: '–ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å–∞–π—Ç–∏ üí°', action: 'find_insights' },
  { icon: Target, label: '–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö üìä', action: 'analyze_data' },
  { icon: Search, label: '–ü–æ—à—É–∫ –ø–∞—Ç–µ—Ä–Ω—ñ–≤ üîç', action: 'find_patterns' }
]

export function AIAssistant({ dataProfile, onChartSuggestion }: AIAssistantProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø —Ç–≤—ñ–π AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏. –ë–∞—á—É, —â–æ —Ç–∏ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ —è–∫—ñ—Å—å –∫—Ä—É—Ç—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó! –©–æ —É —Ç–µ–±–µ –∑–∞ –¥–∞–Ω—ñ? –ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —á–∞—Ä—Ç–∞–º–∏, –∞–Ω–∞–ª—ñ–∑–æ–º —Ç–∞ –∑–Ω–∞–π—Ç–∏ —Ü—ñ–∫–∞–≤—ñ –ø–∞—Ç–µ—Ä–Ω–∏. –©–æ —Å–∫–∞–∂–µ—à?",
      timestamp: new Date(),
      suggestions: QUICK_PROMPTS
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [isCollapsed, setIsCollapsed] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const generateAIResponse = async (userMessage: string): Promise<string> => {
    // Simulate AI processing
    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200))
    
    const lowerMessage = userMessage.toLowerCase()
    
    if (lowerMessage.includes('—á–∞—Ä—Ç') || lowerMessage.includes('–≥—Ä–∞—Ñ—ñ–∫') || lowerMessage.includes('–≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è')) {
      if (!dataProfile) {
        return "–•–º, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ! üìä –ë–µ–∑ –Ω–∏—Ö —è –Ω–µ –º–æ–∂—É –¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏. –ó–∞–∫–∏–Ω—å —Ñ–∞–π–ª —ñ —è –ø–æ–¥–∏–≤–ª—é—Å—è —â–æ —Ç–∞–º —É —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–æ–≥–æ! üòä"
      }
      
      const numericFields = dataProfile.fields.filter(f => f.type === 'number' || f.type === 'integer')
      const categoricalFields = dataProfile.fields.filter(f => f.type === 'string' || f.type === 'categorical')
      
      if (numericFields.length >= 2) {
        return `–û, –∫—Ä—É—Ç–æ! üéØ –ë–∞—á—É —É —Ç–µ–±–µ ${numericFields.length} —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤. –î–ª—è ${numericFields[0].name} —Ç–∞ ${numericFields[1].name} —è –± –ø–æ—Ä–∞–¥–∏–≤ **scatter plot** - –≤—ñ–Ω –ø–æ–∫–∞–∂–µ —á–∏ —î –º—ñ–∂ –Ω–∏–º–∏ –∑–≤'—è–∑–æ–∫. –ê–±–æ **line chart** —è–∫—â–æ —Ö–æ—á–µ—à –ø–æ–±–∞—á–∏—Ç–∏ —Ç—Ä–µ–Ω–¥–∏. –©–æ —Å–∫–∞–∂–µ—à?`
      } else if (categoricalFields.length > 0 && numericFields.length > 0) {
        return `–ê–≥–∞, –º–∞—î—à –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —á–∏—Å–ª–∞! üìà –î–ª—è ${categoricalFields[0].name} vs ${numericFields[0].name} **bar chart** –±—É–¥–µ —ñ–¥–µ–∞–ª—å–Ω–∏–º - —á—ñ—Ç–∫–æ –ø–æ–∫–∞–∂–µ —Ä—ñ–∑–Ω–∏—Ü—ñ. –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±–∞–≥–∞—Ç–æ, —Ç–æ **horizontal bar chart** –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –∫—Ä–∞—â–µ. –°–ø—Ä–æ–±—É—î–º–æ?`
      } else {
        return "–•–º, —Ü—ñ–∫–∞–≤—ñ –¥–∞–Ω—ñ! ü§î –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Å–ø—Ä–æ–±—É–π **bar chart** –∞–±–æ **pie chart**, –∞ –¥–ª—è —á–∏—Å–µ–ª - **histogram**. –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ 'AI Auto-Analysis' —ñ —è —Å–∞–º –≤–∏–±–µ—Ä—É –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç! üòé"
      }
    }
    
    if (lowerMessage.includes('—Ç—Ä–µ–Ω–¥') || lowerMessage.includes('—á–∞—Å')) {
      return "–î–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤ **line chart** - —Ü–µ –∫–ª–∞—Å–∏–∫–∞! üìà –í—ñ–Ω –ø–æ–∫–∞–∂–µ —è–∫ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —á–∞—Å—ñ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —Ç—ñ–ª—å–∫–∏, —â–æ –¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω—ñ. –•–æ—á–µ—à, —â–æ–± —è —Å—Ç–≤–æ—Ä–∏–≤ —Ç–∞–∫–∏–π —á–∞—Ä—Ç? üöÄ"
    }
    
    if (lowerMessage.includes('–∫–æ—Ä–µ–ª—è—Ü—ñ') || lowerMessage.includes('–∑–≤\'—è–∑–æ–∫')) {
      return "–î–ª—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π **scatter plot** - –º—ñ–π —Ñ–∞–≤–æ—Ä–∏—Ç! üîç –í—ñ–Ω –ø–æ–∫–∞–∂–µ —á–∏ —î –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –¥–≤–æ–º–∞ —á–∏—Å–ª–∞–º–∏. –ê–±–æ **correlation heatmap** —è–∫—â–æ –º–∞—î—à –±–∞–≥–∞—Ç–æ –∑–º—ñ–Ω–Ω–∏—Ö. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏! üí°"
    }
    
    if (lowerMessage.includes('–ø–æ—Ä—ñ–≤–Ω—è–Ω') || lowerMessage.includes('–∫–∞—Ç–µ–≥–æ—Ä—ñ')) {
      return "–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π **bar charts** - —Ü–µ must-have! üìä –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –ª–µ–≥–∫–æ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è. –î–ª—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π —Å–ø—Ä–æ–±—É–π **pie chart** –∞–±–æ **donut chart**. –©–æ —Å–∞–º–µ —Ö–æ—á–µ—à –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏? ü§î"
    }
    
    if (lowerMessage.includes('—ñ–Ω—Å–∞–π—Ç') || lowerMessage.includes('–∞–Ω–∞–ª—ñ–∑') || lowerMessage.includes('—â–æ –ø–æ–∫–∞–∑—É—é—Ç—å')) {
      if (!dataProfile) {
        return "–î–ª—è —ñ–Ω—Å–∞–π—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ! üìä –ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–∞–π–ª —ñ —è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é –π–æ–≥–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ü—ñ–∫–∞–≤–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤, –≤–∏–∫–∏–¥—ñ–≤ —Ç–∞ —Ç—Ä–µ–Ω–¥—ñ–≤. –û–±—ñ—Ü—è—é, –±—É–¥–µ —Ü—ñ–∫–∞–≤–æ! üîç"
      }
      
      const missingFields = dataProfile.fields.filter(f => (f.missingValues || 0) > 0)
      const numericFields = dataProfile.fields.filter(f => f.type === 'number' || f.type === 'integer')
      
      let insights = `–û–∫–µ–π, –æ—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤ —É —Ç–≤–æ—ó—Ö –¥–∞–Ω–∏—Ö: üîç\n\n`
      
      if (dataProfile.rowCount < 10) {
        insights += `‚Ä¢ **–ú–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç**: ${dataProfile.rowCount} —Ä—è–¥–∫—ñ–≤ - —Ü–µ –Ω–µ –±–∞–≥–∞—Ç–æ, –∞–ª–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—ñ–¥—ñ–π–¥–µ! üìù\n`
      } else if (dataProfile.rowCount < 1000) {
        insights += `‚Ä¢ **–°–µ—Ä–µ–¥–Ω—ñ–π –¥–∞—Ç–∞—Å–µ—Ç**: ${dataProfile.rowCount.toLocaleString()} —Ä—è–¥–∫—ñ–≤ - —Ü–µ –≤–∂–µ —â–æ—Å—å! üìä\n`
      } else {
        insights += `‚Ä¢ **–í–µ–ª–∏–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç**: ${dataProfile.rowCount.toLocaleString()} —Ä—è–¥–∫—ñ–≤ - –≤–∞—É! üöÄ\n`
      }
      
      insights += `‚Ä¢ **${dataProfile.columnCount} –∫–æ–ª–æ–Ω–æ–∫** - ${dataProfile.columnCount < 5 ? '–∫–æ–º–ø–∞–∫—Ç–Ω–æ!' : '–±–∞–≥–∞—Ç–æ –∑–º—ñ–Ω–Ω–∏—Ö!'}\n`
      
      if (missingFields.length > 0) {
        insights += `‚Ä¢ **–£–≤–∞–≥–∞**: ${missingFields.length} –ø–æ–ª—ñ–≤ –º–∞—é—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è - –º–æ–∂–µ—à —ó—Ö –æ—á–∏—Å—Ç–∏—Ç–∏\n`
      }
      
      if (numericFields.length >= 2) {
        insights += `‚Ä¢ **–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª**: ${numericFields.length} —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ - –º–æ–∂–Ω–∞ —à—É–∫–∞—Ç–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó! üîó\n`
      }
      
      insights += `\n–•–æ—á–µ—à, —â–æ–± —è —Å—Ç–≤–æ—Ä–∏–≤ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è? –ù–∞—Ç–∏—Å–Ω–∏ 'AI Auto-Analysis'! üéØ`
      
      return insights
    }
    
    return "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ç–≤–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏! –ú–æ–∂—É –ø–æ—Ä–∞–¥–∏—Ç–∏ —á–∞—Ä—Ç–∏, –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó. –©–æ —Ü—ñ–∫–∞–≤–∏—Ç—å? –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –∑–Ω–∏–∑—É! üòä"
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return
    
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)
    
    try {
      const aiResponse = await generateAIResponse(inputValue)
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: aiResponse,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, assistantMessage])
    } catch (error) {
      console.error('AI response error:', error)
    } finally {
      setIsTyping(false)
    }
  }

  const handleQuickPrompt = (prompt: string) => {
    setInputValue(prompt)
  }

  const handleQuickAction = (action: string) => {
    switch (action) {
      case 'suggest_chart':
        createChartSuggestion()
        break
      case 'find_insights':
        handleQuickPrompt("–©–æ –ø–æ–∫–∞–∑—É—é—Ç—å –¥–∞–Ω—ñ? –ó–Ω–∞–π–¥–∏ —ñ–Ω—Å–∞–π—Ç–∏")
        break
      case 'analyze_data':
        handleQuickPrompt("–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö")
        break
      case 'find_patterns':
        handleQuickPrompt("–ó–Ω–∞–π–¥–∏ –ø–∞—Ç–µ—Ä–Ω–∏ —Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó")
        break
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const createChartSuggestion = () => {
    if (!dataProfile) {
      alert('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É!')
      return
    }
    
    console.log('üîç AI –∞–Ω–∞–ª—ñ–∑—É—î –ø–æ–ª—è:', dataProfile.fields.map(f => ({ name: f.name, type: f.type })))
    
    // –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–ò–í–ù–ê –ª–æ–≥—ñ–∫–∞ - AI –ó–ê–í–ñ–î–ò –í–ò–ë–ò–†–ê–Ñ –û–ë–ò–î–í–Ü –û–°–Ü!
    let chartType = 'bar'
    let xField = ''
    let yField = ''
    
    // –í–ò–ë–ò–†–ê–Ñ–ú–û –ü–û–õ–Ø –ù–ï–ó–ê–õ–ï–ñ–ù–û –í–Ü–î –¢–ò–ü–£!
    if (dataProfile.fields.length >= 2) {
      // –Ñ —Ö–æ—á–∞ –± 2 –ø–æ–ª—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
      xField = dataProfile.fields[0].name
      yField = dataProfile.fields[1].name
      chartType = 'bar'
      console.log('üéØ –í–∏–±—Ä–∞–≤ –ø–µ—Ä—à—ñ –¥–≤–∞ –ø–æ–ª—è:', { xField, yField })
    } else if (dataProfile.fields.length === 1) {
      // –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–µ –ø–æ–ª–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ –¥–ª—è –æ–±–æ—Ö –æ—Å–µ–π
      xField = dataProfile.fields[0].name
      yField = dataProfile.fields[0].name
      chartType = 'bar'
      console.log('üéØ –û–¥–∏–Ω –ø–æ–ª–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–ª—è –æ–±–æ—Ö –æ—Å–µ–π:', { xField, yField })
    } else {
      // –ù–µ–º–∞—î –ø–æ–ª—ñ–≤ - —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤—ñ
      xField = 'Default_X'
      yField = 'Default_Y'
      chartType = 'bar'
      console.log('üéØ –ù–µ–º–∞—î –ø–æ–ª—ñ–≤ - —Å—Ç–≤–æ—Ä—é—é —Ñ–µ–π–∫–æ–≤—ñ:', { xField, yField })
    }
    
    // –ü–ï–†–ï–í–Ü–†–ö–ê - –ü–û–õ–Ø –ü–û–í–ò–ù–ù–Ü –ë–£–¢–ò –í–ò–ë–†–ê–ù–Ü!
    if (!xField || !yField) {
      console.error('üö® –ü–û–õ–Ø –ù–ï –í–ò–ë–†–ê–ù–Ü! –°—Ç–≤–æ—Ä—é—é –µ–∫—Å—Ç—Ä–µ–Ω—ñ –ø–æ–ª—è!')
      xField = 'Emergency_X'
      yField = 'Emergency_Y'
    }
    
    console.log('üéØ –§–Ü–ù–ê–õ–¨–ù–ò–ô –í–ò–ë–Ü–† AI:', { xField, yField, chartType })
    
    // –°–¢–í–û–†–Æ–Ñ–ú–û –ß–ê–†–¢ –ó –û–ë–û–í'–Ø–ó–ö–û–í–ò–ú–ò –ü–û–õ–Ø–ú–ò
    const chartSpec: ChartSpec = {
      id: Math.random().toString(36).substr(2, 9),
      title: `AI –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è - ${dataProfile.name}`,
      data: {
        sourceId: dataProfile.id
      },
      mark: chartType as ChartMark,
      encoding: {
        x: { field: xField, type: 'nominal' },  // –ó–ê–í–ñ–î–ò –í–ö–ê–ó–£–Ñ–ú–û X
        y: { field: yField, type: 'quantitative' }  // –ó–ê–í–ñ–î–ò –í–ö–ê–ó–£–Ñ–ú–û Y
      },
      config: {
        theme: 'light',
        legend: true,
        labels: true,
        grid: true,
        axis: { x: true, y: true },
        tooltip: true,
        animation: true
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }
    
    console.log('‚úÖ AI —Å—Ç–≤–æ—Ä—é—î —á–∞—Ä—Ç –∑ –û–ë–û–í\'–Ø–ó–ö–û–í–ò–ú–ò –ø–æ–ª—è–º–∏:', chartSpec)
    
    // –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ß–ê–†–¢ –ü–ï–†–ï–î –í–Ü–î–ü–†–ê–í–ö–û–Æ
    if (!chartSpec.encoding.x || !chartSpec.encoding.y) {
      console.error('üö® –ß–ê–†–¢ –ù–ï –ú–ê–Ñ –û–°–ï–ô! –í–∏–ø—Ä–∞–≤–ª—è—é...')
      chartSpec.encoding.x = { field: 'Fixed_X', type: 'nominal' }
      chartSpec.encoding.y = { field: 'Fixed_Y', type: 'quantitative' }
    }
    
    console.log('‚úÖ –§–Ü–ù–ê–õ–¨–ù–ò–ô –ß–ê–†–¢:', chartSpec)
    onChartSuggestion?.(chartSpec)
  }

  return (
    <Card className={`flex flex-col transition-all duration-300 ${isCollapsed ? 'h-16' : 'h-[500px]'}`}>
      <CardHeader className="pb-2 cursor-pointer" onClick={() => setIsCollapsed(!isCollapsed)}>
        <CardTitle className="flex items-center justify-between text-sm">
          <div className="flex items-center gap-2">
            <Bot className="h-4 w-4 text-blue-600" />
            <span>AI –ü–æ–º—ñ—á–Ω–∏–∫</span>
            {dataProfile && (
              <div className="flex items-center gap-1 text-xs text-green-600">
                <CheckCircle className="h-3 w-3" />
                <span>–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</span>
              </div>
            )}
          </div>
          <div className="flex items-center gap-1">
            {isCollapsed ? (
              <MessageSquare className="h-4 w-4 text-gray-400" />
            ) : (
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            )}
          </div>
        </CardTitle>
      </CardHeader>
      
      {!isCollapsed && (
        <CardContent className="flex-1 flex flex-col p-0">
          {/* Quick Actions */}
          {dataProfile && (
            <div className="px-4 pb-3 border-b border-gray-100 dark:border-gray-700">
              <div className="grid grid-cols-2 gap-2">
                {QUICK_ACTIONS.map((action) => {
                  const Icon = action.icon
                  return (
                    <Button
                      key={action.action}
                      variant="outline"
                      size="sm"
                      onClick={() => handleQuickAction(action.action)}
                      className="flex items-center gap-2 text-xs h-8"
                    >
                      <Icon className="h-3 w-3" />
                      {action.label}
                    </Button>
                  )
                })}
              </div>
            </div>
          )}

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3 max-h-[280px]">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                {message.type === 'assistant' && (
                  <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0">
                    <Bot className="h-3 w-3 text-blue-600" />
                  </div>
                )}
                
                <div
                  className={`max-w-[85%] rounded-lg p-2 text-sm ${
                    message.type === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-100 border border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <div className="whitespace-pre-wrap leading-relaxed">{message.content}</div>
                  
                  {message.suggestions && (
                    <div className="mt-2 space-y-1">
                                             <div className="text-xs font-medium text-gray-500 dark:text-gray-400">–®–≤–∏–¥–∫—ñ –∑–∞–ø–∏—Ç–∏: ‚ö°</div>
                      <div className="flex flex-wrap gap-1">
                        {message.suggestions.map((suggestion, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            onClick={() => handleQuickPrompt(suggestion)}
                            className="text-xs h-6 px-2"
                          >
                            {suggestion}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                
                {message.type === 'user' && (
                  <div className="w-6 h-6 rounded-full bg-gray-100 flex items-center justify-center flex-shrink-0">
                    <User className="h-3 w-3 text-gray-600" />
                  </div>
                )}
              </div>
            ))}
            
            {isTyping && (
              <div className="flex gap-2 justify-start">
                <div className="w-6 h-6 rounded-full bg-blue-100 flex items-center justify-center">
                  <Bot className="h-3 w-3 text-blue-600" />
                </div>
                <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-2 border border-gray-200 dark:border-gray-700">
                  <div className="flex items-center gap-2">
                    <div className="flex space-x-1">
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                                         <span className="text-xs text-gray-500 dark:text-gray-400">AI –¥—É–º–∞—î... ü§î</span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          {/* Input */}
          <div className="border-t border-gray-200 dark:border-gray-700 p-3">
            <div className="flex gap-2">
              <div className="flex-1 relative">
                <textarea
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                                     placeholder="–ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ –ø—Ä–æ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ! üòä"
                  className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                  rows={1}
                />
              </div>
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                size="sm"
                className="px-3"
              >
                <Send className="h-3 w-3" />
              </Button>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  )
}
