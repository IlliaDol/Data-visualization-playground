'use client'

import React, { useState, useRef } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { 
  Sparkles, 
  Image, 
  FileText, 
  Presentation, 
  Camera, 
  Palette, 
  Wand2, 
  Upload, 
  Download, 
  Copy, 
  Check,
  Brain,
  MessageSquare,
  Send,
  Lightbulb,
  TrendingUp,
  BarChart3
} from 'lucide-react'

interface AIStoryAssistantProps {
  onAddContent: (content: any) => void
  currentData?: any[]
  currentCharts?: any[]
}

export function AIStoryAssistant({ onAddContent, currentData = [], currentCharts = [] }: AIStoryAssistantProps) {
  const [activeTab, setActiveTab] = useState<'chat' | 'generate' | 'enhance'>('chat')
  const [chatMessages, setChatMessages] = useState<Array<{id: string, role: 'user' | 'assistant', content: string}>>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedContent, setGeneratedContent] = useState<any>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return

    const userMessage = {
      id: crypto.randomUUID(),
      role: 'user' as const,
      content: inputMessage
    }

    setChatMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsGenerating(true)

    // Simulate AI response based on data context
    const aiResponse = await generateAIStoryResponse(inputMessage, currentData, currentCharts)
    
    const assistantMessage = {
      id: crypto.randomUUID(),
      role: 'assistant' as const,
      content: aiResponse
    }

    setChatMessages(prev => [...prev, assistantMessage])
    setIsGenerating(false)
  }

  const generateAIStoryResponse = async (message: string, data: any[], charts: any[]): Promise<string> => {
    // Simulate AI processing delay
    await new Promise(resolve => setTimeout(resolve, 1500))

    const dataStats = {
      rowCount: data.length,
      columnCount: data.length > 0 ? Object.keys(data[0] || {}).length : 0,
      chartCount: charts.length
    }

    // Generate contextual responses based on message content
    if (message.toLowerCase().includes('story') || message.toLowerCase().includes('—ñ—Å—Ç–æ—Ä—ñ—è')) {
      return `üìä –ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö (${dataStats.rowCount} –∑–∞–ø–∏—Å—ñ–≤, ${dataStats.columnCount} –ø–æ–ª—ñ–≤, ${dataStats.chartCount} —á–∞—Ä—Ç—ñ–≤), —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª—é—é—á—É —ñ—Å—Ç–æ—Ä—ñ—é! 

–û—Å—å –∫—ñ–ª—å–∫–∞ —ñ–¥–µ–π –¥–ª—è –≤–∞—à–æ—ó Data Story:
‚Ä¢ **Narrative Arc**: –ü–æ—á–Ω—ñ—Ç—å –∑ –ø—Ä–æ–±–ª–µ–º–∏, –ø–æ–∫–∞–∂—ñ—Ç—å –¥–∞–Ω—ñ, —Ä–æ–∑–∫—Ä–∏–π—Ç–µ —ñ–Ω—Å–∞–π—Ç–∏
‚Ä¢ **Visual Flow**: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤–∞—à—ñ ${dataStats.chartCount} —á–∞—Ä—Ç—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ω–∞—Ä–∞—Ç–∏–≤—É
‚Ä¢ **Key Insights**: –í–∏–¥—ñ–ª—ñ—Ç—å –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ
‚Ä¢ **Call to Action**: –ó–∞–≤–µ—Ä—à—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏

–•–æ—á–µ—Ç–µ, —â–æ–± —è –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥—ñ–≤?`
    }

    if (message.toLowerCase().includes('—Ç–µ–∫—Å—Ç') || message.toLowerCase().includes('text')) {
      return `‚úçÔ∏è –Ø –º–æ–∂—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó:

**–î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:**
‚Ä¢ **–ó–∞–≥–æ–ª–æ–≤–∫–∏** - –ü—Ä–∏–≤–∞–±–ª–∏–≤—ñ –Ω–∞–∑–≤–∏ –¥–ª—è —Å–ª–∞–π–¥—ñ–≤
‚Ä¢ **–û–ø–∏—Å–∏ –¥–∞–Ω–∏—Ö** - –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤–∞—à–∏—Ö –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π  
‚Ä¢ **–Ü–Ω—Å–∞–π—Ç–∏** - –ö–ª—é—á–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –∑ –¥–∞–Ω–∏—Ö
‚Ä¢ **–ü–µ—Ä–µ—Ö–æ–¥–∏** - –ó–≤'—è–∑–∫–∏ –º—ñ–∂ —Å–ª–∞–π–¥–∞–º–∏
‚Ä¢ **–í–∏—Å–Ω–æ–≤–∫–∏** - –ü—ñ–¥—Å—É–º–∫–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

–°–∫–∞–∂—ñ—Ç—å, —è–∫–∏–π —Ç–∏–ø —Ç–µ–∫—Å—Ç—É –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω, —ñ —è —Å—Ç–≤–æ—Ä—é –π–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö!`
    }

    if (message.toLowerCase().includes('—Ñ–æ—Ç–æ') || message.toLowerCase().includes('–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è') || message.toLowerCase().includes('photo')) {
      return `üì∏ –î–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∞—à–æ—ó Data Story —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:**
‚Ä¢ **–Ü–Ω—Ñ–æ–≥—Ä–∞—Ñ—ñ–∫–∞** - –°—Ç–≤–æ—Ä—ñ—Ç—å —Å—Ö–µ–º–∏ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
‚Ä¢ **–Ü–∫–æ–Ω–∫–∏** - –î–æ–¥–∞–π—Ç–µ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ —Å–ª–∞–π–¥—ñ–≤
‚Ä¢ **–§–æ–Ω–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è** - –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ñ–æ–Ω–∏
‚Ä¢ **–î—ñ–∞–≥—Ä–∞–º–∏** - –°–ø—Ä–æ—Å—Ç—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó

–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ, —ñ —è –¥–æ–ø–æ–º–æ–∂—É —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ —Ü–µ –≤ —ñ—Å—Ç–æ—Ä—ñ—é!`
    }

    // Default response
    return `ü§ñ –Ø –≤–∞—à AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Data Stories! –Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑:

**üìù –ö–æ–Ω—Ç–µ–Ω—Ç:**
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞—Ä–∞—Ç–∏–≤—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö
‚Ä¢ –§–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è —ñ–Ω—Å–∞–π—Ç—ñ–≤ —Ç–∞ –≤–∏—Å–Ω–æ–≤–∫—ñ–≤

**üé® –í—ñ–∑—É–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:**
‚Ä¢ –ü—ñ–¥–±—ñ—Ä –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö —Å—Ö–µ–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –º–∞–∫–µ—Ç—É
‚Ä¢ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫–∏

**üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö:**
‚Ä¢ –í–∏—è–≤–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
‚Ä¢ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π

–©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ!`
  }

  const handleGenerateContent = async (type: 'text' | 'image' | 'presentation') => {
    setIsGenerating(true)
    
    // Simulate content generation
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    let content
    switch (type) {
      case 'text':
        content = {
          type: 'text',
          title: 'AI-Generated Slide Title',
          content: `–ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö (${currentData.length} –∑–∞–ø–∏—Å—ñ–≤), –º–∏ –≤–∏—è–≤–∏–ª–∏ –∫—ñ–ª—å–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤:

‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ–∫–∞–∑—É—î –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –Ω–∞ 23% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º
‚Ä¢ –ù–∞–π–≤–∏—â–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó A (45% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—è–≥—É)
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –ø—ñ–∫–æ–≤—ñ –ø–µ—Ä—ñ–æ–¥–∏ –≤ Q2 —Ç–∞ Q4

–¶—ñ –¥–∞–Ω—ñ —Å–≤—ñ–¥—á–∞—Ç—å –ø—Ä–æ —Å—Ç–∞–±—ñ–ª—å–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É.`,
          insights: ['–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –Ω–∞ 23%', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è A –ª—ñ–¥–∏—Ä—É—î', '–°–µ–∑–æ–Ω–Ω—ñ –ø—ñ–∫–∏ –≤ Q2/Q4']
        }
        break
      case 'image':
        content = {
          type: 'image',
          title: 'AI-Generated Visual Concept',
          description: '–Ü–Ω—Ñ–æ–≥—Ä–∞—Ñ—ñ–∫–∞ –∑ –∫–ª—é—á–æ–≤–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏',
          suggestions: [
            '–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π',
            '–õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–æ–∫–∞–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤',
            '–ë–∞—Ä–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—ñ–≤'
          ]
        }
        break
      case 'presentation':
        content = {
          type: 'presentation',
          title: 'AI Story Structure',
          slides: [
            { title: '–í—Å—Ç—É–ø', content: '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ —Ü—ñ–ª–µ–π –∞–Ω–∞–ª—ñ–∑—É' },
            { title: '–î–∞–Ω—ñ', content: '–û–≥–ª—è–¥ –¥–∞—Ç–∞—Å–µ—Ç—É —Ç–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—ó' },
            { title: '–ê–Ω–∞–ª—ñ–∑', content: '–ö–ª—é—á–æ–≤—ñ –∑–Ω–∞—Ö—ñ–¥–∫–∏ —Ç–∞ —Ç—Ä–µ–Ω–¥–∏' },
            { title: '–Ü–Ω—Å–∞–π—Ç–∏', content: '–í–∞–∂–ª–∏–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ —Ç–∞ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ' },
            { title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó', content: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏' }
          ]
        }
        break
    }
    
    setGeneratedContent(content)
    setIsGenerating(false)
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        const content = {
          type: 'image',
          title: file.name,
          url: e.target?.result as string,
          size: file.size
        }
        onAddContent(content)
      }
      reader.readAsDataURL(file)
    }
  }

  const quickPrompts = [
    { icon: TrendingUp, text: '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç—Ä–µ–Ω–¥–∏ –≤ –¥–∞–Ω–∏—Ö', prompt: '–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –æ—Å–Ω–æ–≤–Ω—ñ —Ç—Ä–µ–Ω–¥–∏ –≤ –º–æ—ó—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–≤–æ—Ä–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–∞–π–¥—É' },
    { icon: BarChart3, text: '–°—Ç–≤–æ—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —á–∞—Ä—Ç—ñ–≤', prompt: '–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–≤–∞–±–ª–∏–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–æ—ó—Ö –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π' },
    { icon: Lightbulb, text: '–ó–≥–µ–Ω–µ—Ä—É–π —ñ–Ω—Å–∞–π—Ç–∏', prompt: '–Ø–∫—ñ –∫–ª—é—á–æ–≤—ñ —ñ–Ω—Å–∞–π—Ç–∏ –º–æ–∂–Ω–∞ –≤–∏–¥—ñ–ª–∏—Ç–∏ –∑ —Ü–∏—Ö –¥–∞–Ω–∏—Ö?' },
    { icon: Presentation, text: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó', prompt: '–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó –º–æ—ó—Ö –¥–∞–Ω–∏—Ö' }
  ]

  return (
    <Card className="h-[600px] flex flex-col">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-5 w-5 text-primary" />
          AI Story Assistant
        </CardTitle>
        <div className="flex gap-2">
          <Button
            variant={activeTab === 'chat' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setActiveTab('chat')}
          >
            <MessageSquare className="h-4 w-4 mr-1" />
            –ß–∞—Ç
          </Button>
          <Button
            variant={activeTab === 'generate' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setActiveTab('generate')}
          >
            <Wand2 className="h-4 w-4 mr-1" />
            –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
          </Button>
          <Button
            variant={activeTab === 'enhance' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setActiveTab('enhance')}
          >
            <Sparkles className="h-4 w-4 mr-1" />
            –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è
          </Button>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col">
        {activeTab === 'chat' && (
          <div className="flex-1 flex flex-col">
            {/* Quick Prompts */}
            <div className="mb-4">
              <div className="text-sm font-medium mb-2">–®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏:</div>
              <div className="grid grid-cols-2 gap-2">
                {quickPrompts.map((prompt, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => setInputMessage(prompt.prompt)}
                    className="justify-start text-xs"
                  >
                    <prompt.icon className="h-3 w-3 mr-1" />
                    {prompt.text}
                  </Button>
                ))}
              </div>
            </div>

            {/* Chat Messages */}
            <div className="flex-1 overflow-y-auto space-y-3 mb-4 p-2 border rounded-md bg-muted/20">
              {chatMessages.length === 0 && (
                <div className="text-center text-muted-foreground py-8">
                  <Brain className="h-12 w-12 mx-auto mb-2 opacity-50" />
                  <p>–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª—é—é—á—É Data Story.</p>
                  <p className="text-sm">–ó–∞–ø–∏—Ç–∞–π—Ç–µ –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–µ–∫—Å—Ç—É, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó.</p>
                </div>
              )}
              
              {chatMessages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] p-3 rounded-lg ${
                      message.role === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-background border'
                    }`}
                  >
                    <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                  </div>
                </div>
              ))}
              
              {isGenerating && (
                <div className="flex justify-start">
                  <div className="bg-background border p-3 rounded-lg">
                    <div className="flex items-center gap-2">
                      <div className="animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full"></div>
                      <span className="text-sm">AI –¥—É–º–∞—î...</span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Input */}
            <div className="flex gap-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="–û–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó..."
                className="flex-1 p-2 border border-border rounded-md bg-background text-foreground"
              />
              <Button onClick={handleSendMessage} disabled={!inputMessage.trim() || isGenerating}>
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        )}

        {activeTab === 'generate' && (
          <div className="space-y-4">
            <div className="text-sm text-muted-foreground mb-4">
              –ì–µ–Ω–µ—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI
            </div>

            <div className="grid gap-4">
              <Card className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <FileText className="h-5 w-5 text-blue-500" />
                  <div>
                    <div className="font-medium">–¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</div>
                    <div className="text-sm text-muted-foreground">–ó–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∏, —ñ–Ω—Å–∞–π—Ç–∏</div>
                  </div>
                </div>
                <Button 
                  onClick={() => handleGenerateContent('text')} 
                  disabled={isGenerating}
                  className="w-full"
                >
                  <Wand2 className="h-4 w-4 mr-2" />
                  –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç
                </Button>
              </Card>

              <Card className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <Image className="h-5 w-5 text-green-500" />
                  <div>
                    <div className="font-medium">–í—ñ–∑—É–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏</div>
                    <div className="text-sm text-muted-foreground">–ö–æ–Ω—Ü–µ–ø—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å, —ñ–Ω—Ñ–æ–≥—Ä–∞—Ñ—ñ–∫–∞</div>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button 
                    onClick={() => handleGenerateContent('image')} 
                    disabled={isGenerating}
                    className="flex-1"
                  >
                    <Palette className="h-4 w-4 mr-2" />
                    –ö–æ–Ω—Ü–µ–ø—Ü—ñ—è
                  </Button>
                  <Button 
                    variant="outline"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    <Upload className="h-4 w-4" />
                  </Button>
                </div>
              </Card>

              <Card className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <Presentation className="h-5 w-5 text-purple-500" />
                  <div>
                    <div className="font-medium">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó</div>
                    <div className="text-sm text-muted-foreground">–õ–æ–≥—ñ—á–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Å–ª–∞–π–¥—ñ–≤</div>
                  </div>
                </div>
                <Button 
                  onClick={() => handleGenerateContent('presentation')} 
                  disabled={isGenerating}
                  className="w-full"
                >
                  <Sparkles className="h-4 w-4 mr-2" />
                  –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                </Button>
              </Card>
            </div>

            {/* Generated Content Display */}
            {generatedContent && (
              <Card className="mt-4 p-4 bg-primary/5">
                <div className="flex items-center justify-between mb-3">
                  <div className="font-medium">–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</div>
                  <Button
                    size="sm"
                    onClick={() => onAddContent(generatedContent)}
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    –î–æ–¥–∞—Ç–∏
                  </Button>
                </div>
                <div className="text-sm">
                  {generatedContent.type === 'text' && (
                    <div>
                      <div className="font-medium mb-2">{generatedContent.title}</div>
                      <div className="whitespace-pre-wrap">{generatedContent.content}</div>
                    </div>
                  )}
                  {generatedContent.type === 'image' && (
                    <div>
                      <div className="font-medium mb-2">{generatedContent.title}</div>
                      <div className="text-muted-foreground mb-2">{generatedContent.description}</div>
                      <ul className="list-disc list-inside space-y-1">
                        {generatedContent.suggestions.map((suggestion: string, index: number) => (
                          <li key={index}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {generatedContent.type === 'presentation' && (
                    <div>
                      <div className="font-medium mb-2">{generatedContent.title}</div>
                      <div className="space-y-2">
                        {generatedContent.slides.map((slide: any, index: number) => (
                          <div key={index} className="border-l-2 border-primary pl-3">
                            <div className="font-medium">{index + 1}. {slide.title}</div>
                            <div className="text-muted-foreground text-xs">{slide.content}</div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </Card>
            )}
          </div>
        )}

        {activeTab === 'enhance' && (
          <div className="space-y-4">
            <div className="text-sm text-muted-foreground mb-4">
              –ü–æ–∫—Ä–∞—â—Ç–µ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI
            </div>

            <div className="grid gap-4">
              <Card className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <Wand2 className="h-5 w-5 text-orange-500" />
                  <div>
                    <div className="font-medium">–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É</div>
                    <div className="text-sm text-muted-foreground">–ó—Ä–æ–±–∏—Ç–∏ —Ç–µ–∫—Å—Ç –±—ñ–ª—å—à –∑–∞—Ö–æ–ø–ª—é—é—á–∏–º</div>
                  </div>
                </div>
                <Button className="w-full" variant="outline">
                  <Sparkles className="h-4 w-4 mr-2" />
                  –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –Ω–∞—Ä–∞—Ç–∏–≤
                </Button>
              </Card>

              <Card className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <Palette className="h-5 w-5 text-pink-500" />
                  <div>
                    <div className="font-medium">–°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è</div>
                    <div className="text-sm text-muted-foreground">–ö–æ–ª—å–æ—Ä–∏, —à—Ä–∏—Ñ—Ç–∏, –º–∞–∫–µ—Ç</div>
                  </div>
                </div>
                <Button className="w-full" variant="outline">
                  <Camera className="h-4 w-4 mr-2" />
                  –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –¥–∏–∑–∞–π–Ω
                </Button>
              </Card>

              <Card className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <TrendingUp className="h-5 w-5 text-emerald-500" />
                  <div>
                    <div className="font-medium">–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏</div>
                    <div className="text-sm text-muted-foreground">–î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –∑ –¥–∞–Ω–∏—Ö</div>
                  </div>
                </div>
                <Button className="w-full" variant="outline">
                  <Brain className="h-4 w-4 mr-2" />
                  –ó–Ω–∞–π—Ç–∏ —ñ–Ω—Å–∞–π—Ç–∏
                </Button>
              </Card>
            </div>
          </div>
        )}

        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleFileUpload}
          className="hidden"
        />
      </CardContent>
    </Card>
  )
}
