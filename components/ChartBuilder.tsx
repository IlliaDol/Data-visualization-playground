'use client'

import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { 
  BarChart3, 
  LineChart, 
  ScatterChart, 
  PieChart, 
  Map, 
  Sparkles,
  Code,
  Download,
  Settings,
  Eye,
  TrendingUp,
  Activity,
  Target,
  Layers,
  Gauge,
  Calendar,
  Globe,
  Database,
  Square,
  Circle,
  Triangle,
  BarChart
} from 'lucide-react'
import { DataProfile, ChartSpec, ChartMark } from '@/types'
import { generatePythonCode, generateRCode, generateImageExportCode, downloadFile } from '@/lib/utils'
import { ChartRenderer } from './ChartRenderer'
import { AIAgent } from './AIAgent'

interface ChartBuilderProps {
  dataProfile: DataProfile
  onChartCreated: (chart: ChartSpec) => void
}

const CHART_TYPES = [
  { id: 'bar', name: 'Bar Chart', icon: BarChart3, description: 'Compare categories' },
  { id: 'line', name: 'Line Chart', icon: LineChart, description: 'Show trends over time' },
  { id: 'scatter', name: 'Scatter Plot', icon: ScatterChart, description: 'Show relationships' },
  { id: 'pie', name: 'Pie Chart', icon: PieChart, description: 'Show proportions' },
  { id: 'area', name: 'Area Chart', icon: TrendingUp, description: 'Show cumulative data' },
  { id: 'histogram', name: 'Histogram', icon: Activity, description: 'Show distribution' },
  { id: 'boxplot', name: 'Box Plot', icon: Square, description: 'Show data distribution' },
  { id: 'heatmap', name: 'Heat Map', icon: Target, description: 'Show correlations' },
  { id: 'gauge', name: 'Gauge Chart', icon: Gauge, description: 'Show progress/KPI' },
  { id: 'bubble', name: 'Bubble Chart', icon: Circle, description: '3D scatter plot' },
  { id: 'stacked', name: 'Stacked Bar', icon: Layers, description: 'Compare parts to whole' },
  { id: 'waterfall', name: 'Waterfall', icon: TrendingUp, description: 'Show cumulative effect' },
  { id: 'funnel', name: 'Funnel Chart', icon: Triangle, description: 'Show conversion process' },
  { id: 'radar', name: 'Radar Chart', icon: Target, description: 'Compare multiple variables' },
  { id: 'tree', name: 'Tree Map', icon: Database, description: 'Hierarchical data' },
  { id: 'sankey', name: 'Sankey Diagram', icon: TrendingUp, description: 'Show flow between categories' },
]

export function ChartBuilder({ dataProfile, onChartCreated }: ChartBuilderProps) {
  const [selectedChartType, setSelectedChartType] = useState('bar')
  const [xField, setXField] = useState('')
  const [yField, setYField] = useState('')
  const [colorField, setColorField] = useState('')
  const [chartTitle, setChartTitle] = useState(`Chart Builder - ${dataProfile.name}`)
  const [isGenerating, setIsGenerating] = useState(false)
  const [showPreview, setShowPreview] = useState(false)
  const [isExporting, setIsExporting] = useState(false)
  const [analysisPrompt, setAnalysisPrompt] = useState('')
  const [showAnalysisDetails, setShowAnalysisDetails] = useState(false)
  const [aiAnalysisResult, setAiAnalysisResult] = useState<any>(null)

  // Auto-select fields based on data types
  React.useEffect(() => {
    const numericFields = dataProfile.fields.filter(f => f.type === 'number' || f.type === 'integer')
    const categoricalFields = dataProfile.fields.filter(f => f.type === 'string' || f.type === 'categorical')
    
    if (categoricalFields.length > 0 && !xField) {
      setXField(categoricalFields[0].name)
    }
    if (numericFields.length > 0 && !yField) {
      setYField(numericFields[0].name)
    }
  }, [dataProfile, xField, yField])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤—å—é –∫–æ–ª–∏ –≤–∏–±—Ä–∞–Ω—ñ –ø–æ–ª—è
  React.useEffect(() => {
    if (xField && yField) {
      setShowPreview(true)
    }
  }, [xField, yField])

  const handleCreateChart = () => {
    console.log('Creating chart with:', {
      title: chartTitle,
      type: selectedChartType,
      xField,
      yField,
      colorField,
      dataProfile: dataProfile.name
    })

    const chartSpec: ChartSpec = {
      id: Math.random().toString(36).substr(2, 9),
      title: chartTitle,
      data: {
        sourceId: dataProfile.id
      },
      mark: selectedChartType as ChartMark,
      encoding: {
        x: xField ? { field: xField, type: 'nominal' } : undefined,
        y: yField ? { field: yField, type: 'quantitative' } : undefined,
        color: colorField ? { field: colorField, type: 'nominal' } : undefined
      },
      config: {
        theme: 'light',
        legend: true,
        labels: true,
        grid: true,
        axis: { x: true, y: true },
        tooltip: true,
        animation: true
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    console.log('Chart spec created:', chartSpec)
    onChartCreated(chartSpec)
  }

  const handleAIAssist = async () => {
    // This function is now handled by AIAgent component
    console.log('AI Assist called - handled by AIAgent component')
  }

  const handleAIChartSuggestion = (chartSpec: ChartSpec) => {
    // Apply AI suggestions to the form
    setSelectedChartType(chartSpec.mark)
    setXField(chartSpec.encoding.x?.field || '')
    setYField(chartSpec.encoding.y?.field || '')
    setColorField(chartSpec.encoding.color?.field || '')
    setChartTitle(chartSpec.title)
    
    // Show preview if we have X and Y fields
    if (chartSpec.encoding.x?.field && chartSpec.encoding.y?.field) {
      setShowPreview(true)
    }
  }

  const handleAIAnalysisComplete = (result: any) => {
    setAiAnalysisResult(result)
  }

  const handleExportCode = (language: 'python' | 'r', library?: string) => {
    setIsExporting(true)
    
    setTimeout(() => {
    const chartSpec: ChartSpec = {
      id: Math.random().toString(36).substr(2, 9),
      title: chartTitle,
      data: {
        sourceId: dataProfile.id
      },
      mark: selectedChartType as ChartMark,
      encoding: {
        x: xField ? { field: xField, type: 'nominal' } : undefined,
        y: yField ? { field: yField, type: 'quantitative' } : undefined,
        color: colorField ? { field: colorField, type: 'nominal' } : undefined
      },
      config: {
        theme: 'light',
        legend: true,
        labels: true,
        grid: true,
        axis: { x: true, y: true },
        tooltip: true,
        animation: true
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }

    let code = ''
    let filename = ''
    
    if (language === 'python') {
      const lib = library === 'matplotlib' ? 'matplotlib' : 'plotly'
      code = generatePythonCode(chartSpec, dataProfile, lib)
      filename = `${chartTitle.toLowerCase().replace(/\s+/g, '_')}_${lib}.py`
    } else {
      const lib = library === 'plotly' ? 'plotly' : 'ggplot2'
      code = generateRCode(chartSpec, dataProfile, lib)
      filename = `${chartTitle.toLowerCase().replace(/\s+/g, '_')}_${lib}.R`
    }
    
    downloadFile(code, filename, 'text/plain')
    
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç
      const lib = library || (language === 'python' ? 'plotly' : 'ggplot2')
      alert(`‚úÖ –ö–æ–¥ ${language.toUpperCase()} (${lib}) –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n–§–∞–π–ª: ${filename}`)
      
      setIsExporting(false)
    }, 500)
  }

  const analyzeDataForStatistics = () => {
    if (!dataProfile.sampleData || dataProfile.sampleData.length === 0) {
      return { recommendation: '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É', details: '' }
    }

    const numericFields = dataProfile.fields.filter(f => {
      const sampleValues = dataProfile.sampleData?.slice(0, 5).map(row => row[f.name]) || []
      return sampleValues.some(val => !isNaN(Number(val)) && val !== '' && val !== null)
    })
    
    const categoricalFields = dataProfile.fields.filter(f => {
      const sampleValues = dataProfile.sampleData?.slice(0, 5).map(row => row[f.name]) || []
      return !sampleValues.some(val => !isNaN(Number(val)) && val !== '' && val !== null)
    })

    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
    const hasNumeric = numericFields.length > 0
    const hasCategorical = categoricalFields.length > 0
    const hasMultipleNumeric = numericFields.length >= 2
    const hasMultipleCategorical = categoricalFields.length >= 2
    const sampleSize = dataProfile.sampleData.length

    let recommendation = ''
    let details = ''

    // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–ª—è, –¥–∞—î–º–æ –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    if (xField && yField) {
      const xIsNumeric = numericFields.some(f => f.name === xField)
      const yIsNumeric = numericFields.some(f => f.name === yField)
      
      if (xIsNumeric && yIsNumeric) {
        recommendation = 'üîó –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞–±–æ –ª—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è'
        details = `–î–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–≤\'—è–∑–∫—É –º—ñ–∂ ${xField} —Ç–∞ ${yField}. –ö–æ—Ä–µ–ª—è—Ü—ñ—è –ü—ñ—Ä—Å–æ–Ω–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É, –°–ø—ñ—Ä–º–µ–Ω–∞ –¥–ª—è —Ä–∞–Ω–≥–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.`
      } else if (xIsNumeric && !yIsNumeric) {
        recommendation = 'üìä t-—Ç–µ—Å—Ç –∞–±–æ ANOVA'
        details = `–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å ${xField} –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ ${yField}. t-—Ç–µ—Å—Ç –¥–ª—è –¥–≤–æ—Ö –≥—Ä—É–ø, ANOVA –¥–ª—è —Ç—Ä—å–æ—Ö —ñ –±—ñ–ª—å—à–µ.`
      } else if (!xIsNumeric && yIsNumeric) {
        recommendation = 'üìä t-—Ç–µ—Å—Ç –∞–±–æ ANOVA'
        details = `–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å ${yField} –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ ${xField}. t-—Ç–µ—Å—Ç –¥–ª—è –¥–≤–æ—Ö –≥—Ä—É–ø, ANOVA –¥–ª—è —Ç—Ä—å–æ—Ö —ñ –±—ñ–ª—å—à–µ.`
      } else {
        recommendation = 'üìã –•—ñ-–∫–≤–∞–¥—Ä–∞—Ç —Ç–µ—Å—Ç'
        details = `–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –º—ñ–∂ ${xField} —Ç–∞ ${yField}. –ü–æ–∫–∞–∑—É—î —á–∏ —î –∑–≤\'—è–∑–æ–∫ –º—ñ–∂ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏.`
      }
    } else if (hasNumeric && hasCategorical) {
      if (hasMultipleNumeric) {
        recommendation = 'üìä ANOVA –∞–±–æ MANOVA'
        details = `–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –º—ñ–∂ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏. ANOVA - —è–∫—â–æ –æ–¥–Ω–∞ –∑–∞–ª–µ–∂–Ω–∞ –∑–º—ñ–Ω–Ω–∞, MANOVA - —è–∫—â–æ –∫—ñ–ª—å–∫–∞.`
      } else {
        recommendation = 'üìà t-—Ç–µ—Å—Ç –∞–±–æ ANOVA'
        details = `–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏. t-—Ç–µ—Å—Ç –¥–ª—è –¥–≤–æ—Ö –≥—Ä—É–ø, ANOVA –¥–ª—è —Ç—Ä—å–æ—Ö —ñ –±—ñ–ª—å—à–µ.`
      }
    } else if (hasMultipleNumeric) {
      recommendation = 'üîó –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è –∞–±–æ –∫–æ—Ä–µ–ª—è—Ü—ñ—è'
      details = `–î–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–≤\'—è–∑–∫—ñ–≤ –º—ñ–∂ —á–∏—Å–ª–æ–≤–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏. –ö–æ—Ä–µ–ª—è—Ü—ñ—è –ø–æ–∫–∞–∑—É—î —Å–∏–ª—É –∑–≤\'—è–∑–∫—É, —Ä–µ–≥—Ä–µ—Å—ñ—è - –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è.`
    } else if (hasMultipleCategorical) {
      recommendation = 'üìã –•—ñ-–∫–≤–∞–¥—Ä–∞—Ç —Ç–µ—Å—Ç'
      details = `–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –º—ñ–∂ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏. –ü–æ–∫–∞–∑—É—î —á–∏ —î –∑–≤\'—è–∑–æ–∫ –º—ñ–∂ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏.`
    } else if (hasNumeric) {
      recommendation = 'üìä –û–ø–∏—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
      details = `–°–µ—Ä–µ–¥–Ω—î, –º–µ–¥—ñ–∞–Ω–∞, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, –∫–≤–∞—Ä—Ç–∏–ª—ñ. –î–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.`
    } else if (hasCategorical) {
      recommendation = 'üìà –ß–∞—Å—Ç–æ—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑'
      details = `–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—Ç–æ—Ç–∏ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –î–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
    } else {
      recommendation = '‚ùì –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó'
      details = `–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö –∞–±–æ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.`
    }

    // –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Ä–æ–∑–º—ñ—Ä—É –≤–∏–±—ñ—Ä–∫–∏
    if (sampleSize < 30) {
      details += ` ‚ö†Ô∏è –ú–∞–ª–µ–Ω—å–∫–∞ –≤–∏–±—ñ—Ä–∫–∞ (${sampleSize} —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å) - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏.`
    } else if (sampleSize > 1000) {
      details += ` ‚úÖ –í–µ–ª–∏–∫–∞ –≤–∏–±—ñ—Ä–∫–∞ (${sampleSize} —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å) - –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏.`
    }

    return { recommendation, details }
  }

  const handleExportImage = async (format: 'png' | 'svg' | 'pdf') => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    if (!xField) {
      alert('‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ X –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.')
      return
    }
    
    if (!yField && selectedChartType !== 'pie') {
      alert('‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ Y –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.')
      return
    }
    
    if (!showPreview) {
      alert('‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∂—ñ—Ç—å –ø—Ä–µ–≤—å—é —á–∞—Ä—Ç—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.')
      return
    }
    
    setIsExporting(true)
    
    try {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ —á–∞—Ä—Ç–æ–º
      const chartElement = document.querySelector('.chart-export-container') || 
                          document.querySelector('.recharts-wrapper') || 
                          document.querySelector('[style*="height: 400px"]')
      
      if (!chartElement) {
        alert('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —á–∞—Ä—Ç –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —á–∞—Ä—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
        setIsExporting(false)
        return
      }

      // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ html2canvas –¥–∏–Ω–∞–º—ñ—á–Ω–æ
      const html2canvas = (await import('html2canvas')).default
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      const canvas = await html2canvas(chartElement as HTMLElement, {
        backgroundColor: '#ffffff',
        scale: 2, // –í–∏—â–∞ —è–∫—ñ—Å—Ç—å
        useCORS: true,
        allowTaint: true
      })
      
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
      let dataUrl = ''
      let filename = `${chartTitle.toLowerCase().replace(/\s+/g, '_')}.${format}`
      
      if (format === 'png') {
        dataUrl = canvas.toDataURL('image/png')
      } else if (format === 'svg') {
        // –î–ª—è SVG –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PNG —è–∫ fallback
        dataUrl = canvas.toDataURL('image/png')
        filename = filename.replace('.svg', '.png')
      } else if (format === 'pdf') {
        // –î–ª—è PDF –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PNG —è–∫ fallback
        dataUrl = canvas.toDataURL('image/png')
        filename = filename.replace('.pdf', '.png')
      }
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      const link = document.createElement('a')
      link.download = filename
      link.href = dataUrl
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      alert(`‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${format.toUpperCase()} –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n–§–∞–π–ª: ${filename}`)
      
    } catch (error) {
      console.error('Export error:', error)
      alert(`‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`)
    } finally {
      setIsExporting(false)
    }
  }

  return (
    <div className="space-y-6">
                  <Card className="bg-card border-border">
        <CardHeader>
                      <CardTitle className="flex items-center gap-2 text-foreground">
            <BarChart3 className="h-5 w-5 text-blue-600 dark:text-blue-400" />
            Chart Builder
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Chart Type Selection */}
          <div>
                          <h3 className="text-sm font-medium mb-3 text-foreground">Chart Type</h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {CHART_TYPES.map((type) => {
                const Icon = type.icon
                return (
                  <button
                    key={type.id}
                    onClick={() => setSelectedChartType(type.id)}
                    className={`p-4 border rounded-lg text-left transition-colors ${
                      selectedChartType === type.id
                        ? 'border-primary bg-primary/10'
                        : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                    }`}
                  >
                    <Icon className="h-6 w-6 mb-2 text-blue-600 dark:text-blue-400" />
                                          <div className="font-medium text-sm text-foreground">{type.name}</div>
                      <div className="text-xs text-muted-foreground">{type.description}</div>
                  </button>
                )
              })}
            </div>
          </div>

          {/* Field Selection */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
                              <label className="block text-sm font-medium mb-2 text-foreground">X Axis</label>
              <div className="text-xs text-muted-foreground mb-2">
                üí° –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–µ –ø–æ–ª–µ –∞–±–æ –¥–∞—Ç—É –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
              </div>
              <select
                value={xField}
                onChange={(e) => setXField(e.target.value)}
                className="w-full p-2 border border-border rounded-md bg-background text-foreground"
              >
                <option value="">Select field</option>
                {dataProfile.fields.map((field) => (
                  <option key={field.name} value={field.name}>
                    {field.name} ({field.type})
                  </option>
                ))}
              </select>
            </div>
            
            <div>
                              <label className="block text-sm font-medium mb-2 text-foreground">Y Axis</label>
              <div className="text-xs text-muted-foreground mb-2">
                üí° –í–∏–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å (—Å—É–º–∏, –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
              </div>
              <select
                value={yField}
                onChange={(e) => setYField(e.target.value)}
                className="w-full p-2 border border-border rounded-md bg-background text-foreground"
              >
                <option value="">Select field</option>
                {dataProfile.fields.map((field) => (
                  <option key={field.name} value={field.name}>
                    {field.name} ({field.type})
                  </option>
                ))}
              </select>
            </div>
            
            <div>
                              <label className="block text-sm font-medium mb-2 text-foreground">Color (Optional)</label>
              <select
                value={colorField}
                onChange={(e) => setColorField(e.target.value)}
                className="w-full p-2 border border-border rounded-md bg-background text-foreground"
              >
                <option value="">No color</option>
                {dataProfile.fields.map((field) => (
                  <option key={field.name} value={field.name}>
                    {field.name} ({field.type})
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Chart Title */}
          <div>
                            <label className="block text-sm font-medium mb-2 text-foreground">Chart Title</label>
            <input
              type="text"
              value={chartTitle}
              onChange={(e) => setChartTitle(e.target.value)}
              className="w-full p-2 border border-border rounded-md bg-background text-foreground"
              placeholder="Enter chart title"
            />
          </div>

          {/* AI Analysis Section */}
          <div className="border-t border-border pt-4">
            <AIAgent 
              dataProfile={dataProfile}
              onChartSuggestion={handleAIChartSuggestion}
              onAnalysisComplete={handleAIAnalysisComplete}
            />
          </div>

          {/* Actions */}
          <div className="flex flex-wrap gap-3">
            <Button
              onClick={handleCreateChart}
              disabled={!xField || (!yField && selectedChartType !== 'pie')}
              className="flex items-center gap-2"
            >
              <BarChart3 className="h-4 w-4" />
              Create Chart
            </Button>
            
            <Button
              onClick={() => setShowPreview(!showPreview)}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Eye className="h-4 w-4" />
              Preview
            </Button>
          </div>

          {/* Code Export */}
          <div className="border-t border-border pt-4">
            <h3 className="text-sm font-medium mb-3 text-foreground flex items-center gap-2">
              <Code className="h-4 w-4" />
              Export Code
            </h3>
            <div className="grid grid-cols-2 gap-2">
              <Button
                onClick={() => handleExportCode('python', 'plotly')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={isExporting}
              >
                <Code className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'Python (Plotly)'}
              </Button>
              <Button
                onClick={() => handleExportCode('python', 'matplotlib')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={isExporting}
              >
                <Code className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'Python (Matplotlib)'}
              </Button>
              <Button
                onClick={() => handleExportCode('r', 'ggplot2')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={isExporting}
              >
                <Code className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'R (ggplot2)'}
              </Button>
              <Button
                onClick={() => handleExportCode('r', 'plotly')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={isExporting}
              >
                <Code className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'R (Plotly)'}
              </Button>
            </div>
          </div>

          {/* Image Export */}
          <div className="border-t border-border pt-4">
            <h3 className="text-sm font-medium mb-3 text-foreground flex items-center gap-2">
              <Download className="h-4 w-4" />
              Export Image
            </h3>
            <div className="grid grid-cols-3 gap-2">
              <Button
                onClick={() => handleExportImage('png')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={!xField || (!yField && selectedChartType !== 'pie') || !showPreview || isExporting}
              >
                <Download className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'PNG (High Res)'}
              </Button>
              <Button
                onClick={() => handleExportImage('svg')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={!xField || (!yField && selectedChartType !== 'pie') || !showPreview || isExporting}
              >
                <Download className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'SVG (Vector)'}
              </Button>
              <Button
                onClick={() => handleExportImage('pdf')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
                disabled={!xField || (!yField && selectedChartType !== 'pie') || !showPreview || isExporting}
              >
                <Download className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'PDF (Print Ready)'}
              </Button>
            </div>
          </div>

          {/* Preview */}
          {showPreview && (
            <div className="border border-border rounded-lg p-4 bg-muted">
              <h3 className="text-sm font-medium mb-2 text-foreground">Preview</h3>
              <div className="mb-2 text-xs text-muted-foreground">
                Debug Info: Chart Type={selectedChartType}, X={xField}, Y={yField}, 
                Data Rows={dataProfile.sampleData?.length || 0}
              </div>
              <div className="bg-card rounded border border-border p-4">
                {xField && (yField || selectedChartType === 'pie') ? (
                  <div>
                    <div className="mb-2 text-xs text-muted-foreground">
                      Debug: X={xField}, Y={yField}, Data={dataProfile.sampleData?.length || 0} rows
                    </div>
                    <ChartRenderer 
                      chartSpec={{
                        id: 'preview',
                        title: chartTitle,
                        data: {
                          sourceId: dataProfile.id,
                          transform: []
                        },
                        mark: selectedChartType as ChartMark,
                        encoding: {
                          x: { field: xField, type: 'nominal' },
                          y: { field: yField, type: 'quantitative' },
                          color: colorField ? { field: colorField, type: 'nominal' } : undefined
                        },
                        config: {
                          theme: 'light',
                          legend: true,
                          labels: true,
                          grid: true,
                          axis: { x: true, y: true },
                          tooltip: true,
                          animation: true
                        },
                        createdAt: new Date(),
                        updatedAt: new Date()
                      }}
                      data={dataProfile.sampleData || []}
                    />
                  </div>
                ) : (
                  <div className="h-64 flex items-center justify-center text-muted-foreground">
                    –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–ª—è X —Ç–∞ Y –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —á–∞—Ä—Ç—É
                  </div>
                )}
              </div>
              
              {/* Statistical Analysis Recommendations */}
              <div className="mt-4 border-t border-border pt-4">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="text-sm font-medium text-foreground flex items-center gap-2">
                    üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∞–Ω–∞–ª—ñ–∑—É
                  </h4>
                  <Button
                    onClick={() => setShowAnalysisDetails(!showAnalysisDetails)}
                    variant="outline"
                    size="sm"
                    className="text-xs"
                  >
                    {showAnalysisDetails ? '–°—Ö–æ–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ'}
                  </Button>
                </div>
                
                {(() => {
                  const analysis = analyzeDataForStatistics()
                  return (
                    <div className="space-y-2">
                      <div className="text-sm font-medium text-primary">
                        {analysis.recommendation}
                      </div>
                      
                      {showAnalysisDetails && (
                        <div className="text-xs text-muted-foreground bg-muted p-3 rounded-md">
                          <p className="mb-2">{analysis.details}</p>
                          
                          <div className="mt-3 space-y-1">
                            <div className="font-medium text-foreground">üìà –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏:</div>
                            <ul className="list-disc list-inside space-y-1 text-xs">
                              <li><strong>–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:</strong> –ü—ñ—Ä—Å–æ–Ω–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª) –∞–±–æ –°–ø—ñ—Ä–º–µ–Ω–∞ (—Ä–∞–Ω–≥–æ–≤–∞)</li>
                              <li><strong>–†–µ–≥—Ä–µ—Å—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:</strong> –õ—ñ–Ω—ñ–π–Ω–∞, –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞, –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è</li>
                              <li><strong>–ö–ª–∞—Å—Ç–µ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:</strong> K-means, —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è</li>
                              <li><strong>–ß–∞—Å–æ–≤—ñ —Ä—è–¥–∏:</strong> ARIMA, –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è</li>
                              <li><strong>–ù–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏:</strong> –ú–∞–Ω–Ω–∞-–£—ñ—Ç–Ω—ñ, –ö—Ä—É—Å–∫–∞–ª–∞-–£–æ–ª–ª—ñ—Å–∞</li>
                            </ul>
                          </div>
                        </div>
                      )}
                    </div>
                  )
                })()}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
