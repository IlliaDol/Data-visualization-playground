'use client'

import React, { useState, useEffect } from 'react'
import { useSearchParams } from 'next/navigation'
import { VegaLiteChart } from '@/lib/render'
import { decodeState, createPermalink } from '@/lib/permalink'
import { createChartSpecFromNLQ } from '@/lib/nlq'
import { ChartSpecV1, ChartSpecZ } from '@/types'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Share2, Copy, Download, Eye, Sparkles, AlertCircle } from 'lucide-react'
import toast from 'react-hot-toast'

export default function QPage() {
  const searchParams = useSearchParams()
  const [spec, setSpec] = useState<ChartSpecV1 | null>(null)
  const [prompt, setPrompt] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [shareUrl, setShareUrl] = useState('')

  useEffect(() => {
    const s = searchParams.get('s')
    const promptParam = searchParams.get('prompt')
    
    if (promptParam) {
      setPrompt(promptParam)
    }
    
    if (s) {
      try {
        const decodedState = decodeState(s) as any
        const validatedSpec = ChartSpecZ.parse(decodedState.chartSpec)
        setSpec(validatedSpec)
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ share URL
        const url = createPermalink(validatedSpec, {
          prompt: decodedState.meta?.prompt || promptParam || ''
        })
        setShareUrl(url)
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É:', error)
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è')
      }
    }
  }, [searchParams])

  const handlePromptSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!prompt.trim()) return
    
    setIsLoading(true)
    setError(null)
    
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–∏—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ü–µ –±—É–¥–µ –∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É)
      const mockDataContext = {
        fields: ['category', 'value', 'date'],
        data: [
          { category: 'A', value: 10, date: '2023-01-01' },
          { category: 'B', value: 20, date: '2023-01-02' },
          { category: 'C', value: 15, date: '2023-01-03' }
        ],
        fieldTypes: {
          category: 'nominal',
          value: 'quantitative',
          date: 'temporal'
        }
      }
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ NLQ –∞–≥–µ–Ω—Ç
      const chartSpec = await createChartSpecFromNLQ(prompt, mockDataContext)
      setSpec(chartSpec)
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ share URL
      const url = createPermalink(chartSpec, { prompt })
      setShareUrl(url)
      
      toast.success('–ì—Ä–∞—Ñ—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞:', error)
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫')
      toast.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞')
    } finally {
      setIsLoading(false)
    }
  }

  const handleShare = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl)
      toast.success('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!')
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', error)
      toast.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è')
    }
  }

  const handleFork = () => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ –¥–∞–Ω–∏–º–∏
    window.location.href = '/'
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted flex items-center justify-center">
        <Card className="max-w-md w-full">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-red-600">
              <AlertCircle className="h-5 w-5" />
              –ü–æ–º–∏–ª–∫–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground mb-4">{error}</p>
            <Button onClick={() => window.location.href = '/'} className="w-full">
              –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-foreground mb-4">
              üìä DataViz AI - –ó–∞–ø–∏—Ç ‚Üí –ì—Ä–∞—Ñ—ñ–∫
            </h1>
            <p className="text-lg text-muted-foreground">
              –°—Ç–≤–æ—Ä—é–π—Ç–µ –≥—Ä–∞—Ñ—ñ–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏ —Ç–∞ –¥—ñ–ª—ñ—Ç—å—Å—è –Ω–∏–º–∏
            </p>
          </div>

          {/* Prompt Input */}
          {!spec && (
            <Card className="mb-8">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5" />
                  –ó–∞–ø–∏—Ç–∞–π –¥–∞–Ω—ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é
                </CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handlePromptSubmit} className="flex gap-4">
                  <Input
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –º—ñ—Å—è—Ü—è—Ö' –∞–±–æ '–°—Ç–≤–æ—Ä–∏ –¥—ñ–∞–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤—ñ–∫—É'"
                    className="flex-1"
                    disabled={isLoading}
                  />
                  <Button type="submit" disabled={isLoading || !prompt.trim()}>
                    {isLoading ? '–°—Ç–≤–æ—Ä—é—é...' : '–°—Ç–≤–æ—Ä–∏—Ç–∏'}
                  </Button>
                </form>
              </CardContent>
            </Card>
          )}

          {/* Chart Display */}
          {spec && (
            <div className="space-y-6">
              {/* Chart Info */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span>{spec.title || '–ì—Ä–∞—Ñ—ñ–∫'}</span>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleShare}
                        className="flex items-center gap-2"
                      >
                        <Share2 className="h-4 w-4" />
                        –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleFork}
                        className="flex items-center gap-2"
                      >
                        <Copy className="h-4 w-4" />
                        Fork
                      </Button>
                    </div>
                  </CardTitle>
                  {spec.meta?.prompt && (
                    <p className="text-sm text-muted-foreground">
                      –ó–∞–ø–∏—Ç: "{spec.meta.prompt}"
                    </p>
                  )}
                </CardHeader>
                <CardContent>
                  <div className="bg-card rounded-lg p-4 border border-border">
                    <VegaLiteChart 
                      spec={spec} 
                      width={800} 
                      height={400}
                      className="w-full"
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Share Info */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Share2 className="h-5 w-5" />
                    –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≥—Ä–∞—Ñ—ñ–∫–æ–º
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex gap-2">
                    <Input
                      value={shareUrl}
                      readOnly
                      className="flex-1"
                    />
                    <Button
                      variant="outline"
                      onClick={handleShare}
                      className="flex items-center gap-2"
                    >
                      <Copy className="h-4 w-4" />
                      –ö–æ–ø—ñ—é–≤–∞—Ç–∏
                    </Button>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    –¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞. 
                    –ë—É–¥—å-—Ö—Ç–æ –∑ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫.
                  </p>
                </CardContent>
              </Card>

              {/* Actions */}
              <div className="flex gap-4 justify-center">
                <Button
                  variant="outline"
                  onClick={() => {
                    setSpec(null)
                    setPrompt('')
                    setShareUrl('')
                  }}
                >
                  –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫
                </Button>
                <Button
                  onClick={handleFork}
                  className="flex items-center gap-2"
                >
                  <Eye className="h-4 w-4" />
                  –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ
                </Button>
              </div>
            </div>
          )}

          {/* Empty State */}
          {!spec && !isLoading && (
            <Card>
              <CardContent className="text-center py-12">
                <Sparkles className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">
                  –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –≥—Ä–∞—Ñ—ñ–∫
                </h3>
                <p className="text-muted-foreground mb-4">
                  –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –≤–∏—â–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≥–æ—Ç–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                </p>
                <div className="space-y-2 text-sm text-muted-foreground">
                  <p>üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:</p>
                  <ul className="space-y-1">
                    <li>‚Ä¢ "–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –º—ñ—Å—è—Ü—è—Ö"</li>
                    <li>‚Ä¢ "–°—Ç–≤–æ—Ä–∏ –¥—ñ–∞–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤—ñ–∫—É"</li>
                    <li>‚Ä¢ "–í—ñ–∑—É–∞–ª—ñ–∑—É–π –∫–æ—Ä–µ–ª—è—Ü—ñ—é –º—ñ–∂ –¥–æ—Ö–æ–¥–∞–º–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏"</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  )
}
