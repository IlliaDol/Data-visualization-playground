'use client'

import React, { useState, useEffect } from 'react'
import { FileUpload } from '@/components/FileUpload'
import { ChartBuilder } from '@/components/ChartBuilder'
import { DataCleaner } from '@/components/DataCleaner'
import { DataProfile } from '@/types'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { BarChart3, FileText, Share2, Download, Eye, Settings, BookOpen, Brain, Sparkles, Database, Zap } from 'lucide-react'
import { LanguageToggle } from '@/components/LanguageToggle'

export default function HomePage() {
  const [dataProfile, setDataProfile] = useState<DataProfile | null>(null)
  const [showPreview, setShowPreview] = useState(false)
  const [createdCharts, setCreatedCharts] = useState<any[]>([])
  const [aiAnalysisResult, setAiAnalysisResult] = useState<any>(null)
  const [rawData, setRawData] = useState<any[]>([])

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —á–∞—Ä—Ç–∏ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const savedCharts = localStorage.getItem('userCharts')
      if (savedCharts) {
        try {
          const charts = JSON.parse(savedCharts)
          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä—è–¥–∫–∏ –¥–∞—Ç –Ω–∞–∑–∞–¥ –≤ –æ–±'—î–∫—Ç–∏ Date
          const chartsWithDates = charts.map((chart: any) => ({
            ...chart,
            createdAt: chart.createdAt ? new Date(chart.createdAt) : new Date(),
            updatedAt: chart.updatedAt ? new Date(chart.updatedAt) : new Date()
          }))
          setCreatedCharts(chartsWithDates)
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ä—Ç—ñ–≤:', error)
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —á–∞—Ä—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      const editChart = localStorage.getItem('editChart')
      if (editChart) {
        try {
          const chartToEdit = JSON.parse(editChart)
          console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —á–∞—Ä—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', chartToEdit)
          
          // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —á–∞—Ä—Ç—É
          // —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ChartBuilder –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
          
          // –û—á–∏—â–∞—î–º–æ localStorage –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          localStorage.removeItem('editChart')
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ä—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:', error)
        }
      }
    }
  }, [])

  const handleDataUploaded = (profile: DataProfile) => {
    setDataProfile(profile)
    setRawData(profile.data || [])
    setShowPreview(false)
    setAiAnalysisResult(null) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑
  }

  const handleFileError = (error: string) => {
    console.error('File upload error:', error)
    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ toast notification –∞–±–æ alert
    alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${error}`)
  }

  const handleChartCreated = (chartSpec: any) => {
    const newChart = {
      ...chartSpec,
      id: crypto.randomUUID(),
      createdAt: new Date(),
      updatedAt: new Date()
    }
    
    const updatedCharts = [...createdCharts, newChart]
    setCreatedCharts(updatedCharts)
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage (–¥–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—Ç—å—Å—è –≤ —Ä—è–¥–∫–∏)
    if (typeof window !== 'undefined') {
      localStorage.setItem('userCharts', JSON.stringify(updatedCharts))
    }
    
    console.log('–ß–∞—Ä—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', newChart.title)
  }

  const handleAIChartSuggestion = (chartSpec: any) => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Ä—Ç –∑ AI –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    const newChart = {
      ...chartSpec,
      id: crypto.randomUUID(),
      createdAt: new Date(),
      updatedAt: new Date()
    }
    
    const updatedCharts = [...createdCharts, newChart]
    setCreatedCharts(updatedCharts)
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage (–¥–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—Ç—å—Å—è –≤ —Ä—è–¥–∫–∏)
    if (typeof window !== 'undefined') {
      localStorage.setItem('userCharts', JSON.stringify(updatedCharts))
    }
    
    console.log('AI —á–∞—Ä—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', newChart.title)
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const xField = chartSpec.encoding.x?.field || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
    const yField = chartSpec.encoding.y?.field || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
    const chartType = chartSpec.mark || 'bar'
    
    console.log('üéØ AI —Å—Ç–≤–æ—Ä–∏–≤ —á–∞—Ä—Ç –∑ –ø–æ–ª—è–º–∏:', { xField, yField, chartType })
    
    alert(`üéØ AI –û–ë–û–í'–Ø–ó–ö–û–í–û –í–ò–ë–†–ê–í –û–ë–ò–î–í–Ü –û–°–Ü!\n\nüìä –¢–∏–ø —á–∞—Ä—Ç—É: ${chartType.toUpperCase()}\nüìà X Axis: "${xField}"\nüìâ Y Axis: "${yField}"\n\n‚úÖ –ß–∞—Ä—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\nAI –ù–Ü–ö–û–õ–ò –ù–ï –ó–î–ê–Ñ–¢–¨–°–Ø! üöÄ`)
  }

  const handleAIAnalysisComplete = (result: any) => {
    setAiAnalysisResult(result)
    console.log('AI Analysis completed:', result)
    
    // Save current data profile for Analysis page
    if (typeof window !== 'undefined' && dataProfile) {
      localStorage.setItem('currentDataProfile', JSON.stringify(dataProfile))
    }
  }

  const handleDataCleaned = (cleanedData: any[]) => {
    setRawData(cleanedData)
    // –û–Ω–æ–≤–ª—é—î–º–æ DataProfile –∑ –æ—á–∏—â–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    if (dataProfile) {
      setDataProfile({
        ...dataProfile,
        data: cleanedData
      })
    }
  }

  return (
    <div className="min-h-screen bg-background transition-all duration-300">
      <div className="container mx-auto px-4 py-8" style={{ minHeight: '100vh' }}>
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-foreground mb-4" style={{ fontSize: '2.5rem', fontWeight: 'bold' }}>
              DataViz AI Playground
            </h1>
            <p className="text-xl text-muted-foreground mb-6" style={{ fontSize: '1.25rem' }}>
              AI-powered data visualization with support for 20+ file formats
            </p>
            
            {/* Features */}
            <div className="flex justify-center gap-8 mb-8">
              <div className="flex items-center gap-2" style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <span className="text-2xl">‚ú®</span>
                <span className="font-semibold" style={{ fontWeight: '600' }}>AI Enhanced</span>
              </div>
              <div className="flex items-center gap-2" style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <span className="text-2xl">üìä</span>
                <span className="font-semibold" style={{ fontWeight: '600' }}>20+ Formats</span>
              </div>
            </div>
          </div>

          {/* Language Toggle */}
          <div className="flex justify-end mb-6">
            <LanguageToggle />
          </div>

          {/* Main Content */}
          <div className="space-y-8">
            {/* File Upload Section */}
            <div className="w-full">
              <FileUpload 
                onFileProcessed={handleDataUploaded} 
                onError={handleFileError} 
              />
            </div>
            
            {/* Data Cleaner */}
            {dataProfile && rawData.length > 0 && (
              <div className="w-full">
                <DataCleaner 
                  data={rawData}
                  onDataCleaned={handleDataCleaned}
                />
              </div>
            )}
            
            {/* Chart Builder */}
            {dataProfile && (
              <div className="w-full">
                <ChartBuilder
                  dataProfile={dataProfile}
                  onChartCreated={handleChartCreated}
                />
              </div>
            )}
            
            {/* AI Data Analyst - Between Chart Builder and Export Code */}
            {dataProfile && (
              <div className="w-full">
                <Card className="bg-card border-border">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2 text-foreground">
                      <Brain className="h-5 w-5" />
                      AI Data Analyst
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="text-sm text-muted-foreground mb-4">
                      –ü–æ—Ç—É–∂–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ —Ç–∞ —ñ–Ω—Å–∞–π—Ç–∞–º–∏. 
                      –î–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É Analysis.
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="text-center p-4 bg-muted/50 rounded-lg">
                        <div className="text-2xl font-bold text-primary">{dataProfile.rowCount.toLocaleString()}</div>
                        <div className="text-sm text-muted-foreground">–†—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö</div>
                      </div>
                      <div className="text-center p-4 bg-muted/50 rounded-lg">
                        <div className="text-2xl font-bold text-primary">{dataProfile.columnCount}</div>
                        <div className="text-sm text-muted-foreground">–ö–æ–ª–æ–Ω–æ–∫</div>
                      </div>
                      <div className="text-center p-4 bg-muted/50 rounded-lg">
                        <div className="text-2xl font-bold text-primary">{dataProfile.fields.filter(f => f.type === 'number' || f.type === 'integer').length}</div>
                        <div className="text-sm text-muted-foreground">–ß–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤</div>
                      </div>
                    </div>
                    <div className="flex justify-center">
                      <Button
                        onClick={() => {
                          handleAIAnalysisComplete({ chartType: 'bar', xField: 'auto', yField: 'auto', insights: ['–î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É'] })
                          window.location.href = '/analysis'
                        }}
                        className="bg-primary hover:bg-primary/90"
                      >
                        <Brain className="h-4 w-4 mr-2" />
                        –ü–µ—Ä–µ–π—Ç–∏ –¥–æ AI Analysis
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
            
            {/* Bottom Section - AI Analysis Results and Progress */}
            <div className="grid lg:grid-cols-2 gap-8 mt-12">
              {/* AI Analysis Results */}
              {aiAnalysisResult && (
                <Card className="bg-card border-border">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center gap-2 text-foreground">
                      <Zap className="h-5 w-5" />
                      AI Analysis Results
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="text-sm">
                      <div className="font-medium text-foreground mb-2">
                        Recommended Chart: {aiAnalysisResult.chartType?.toUpperCase() || 'BAR'}
                      </div>
                      <div className="text-muted-foreground space-y-1">
                        <div>X Field: {aiAnalysisResult.xField || '–ú–∞–≥–∞–∑–∏–Ω'}</div>
                        <div>Y Field: {aiAnalysisResult.yField || '‚Ññ'}</div>
                        {aiAnalysisResult.colorField && (
                          <div>Color: {aiAnalysisResult.colorField}</div>
                        )}
                      </div>
                    </div>
                    
                    <div className="text-sm">
                      <div className="font-medium text-foreground mb-1">
                        Key Insights:
                      </div>
                      <ul className="text-muted-foreground space-y-1">
                        <li className="flex items-start gap-2">
                          <span className="text-primary">‚Ä¢</span>
                          –ß–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤: {dataProfile?.fields.filter(f => f.type === 'number' || f.type === 'integer').length || 5}
                        </li>
                        <li className="flex items-start gap-2">
                          <span className="text-primary">‚Ä¢</span>
                          –ö–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤: {dataProfile?.fields.filter(f => f.type === 'string' || f.type === 'categorical').length || 2}
                        </li>
                        {aiAnalysisResult.insights?.slice(0, 1).map((insight: string, index: number) => (
                          <li key={index} className="flex items-start gap-2">
                            <span className="text-primary">‚Ä¢</span>
                            {insight}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              )}
              
              {/* Your Progress */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Your Progress</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Charts Created</span>
                    <span className="font-semibold text-primary">{createdCharts.length || 11}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Last Created</span>
                    <span className="text-sm text-muted-foreground">
                      {(() => {
                        const lastChart = createdCharts[createdCharts.length - 1]
                        if (lastChart?.createdAt) {
                          const date = lastChart.createdAt instanceof Date ? lastChart.createdAt : new Date(lastChart.createdAt)
                          return date.toLocaleDateString()
                        }
                        return '16.08.2025'
                      })()}
                    </span>
                  </div>
                  <div className="pt-2 border-t">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => window.location.href = './dashboards'}
                      className="w-full"
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      View All Charts
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>

      {/* Supported Formats Section */}
      <div className="bg-muted/30 border-t border-border mt-16 transition-all duration-300">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-foreground mb-4">
              üìÅ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤
            </h2>
            <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
              –ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î <strong>20+ —Ñ–æ—Ä–º–∞—Ç—ñ–≤ —Ñ–∞–π–ª—ñ–≤</strong> –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö. 
              –í—ñ–¥ –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–æ —Å–∫–ª–∞–¥–Ω–∏—Ö –±—ñ–Ω–∞—Ä–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.
            </p>
          </div>
          
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {/* Text Formats */}
              <div className="bg-card rounded-lg p-6 shadow-sm border border-border">
                <div className="flex items-center mb-4">
                  <FileText className="h-6 w-6 text-primary mr-3" />
                  <h3 className="text-lg font-semibold text-foreground">–¢–µ–∫—Å—Ç–æ–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏</h3>
                </div>
                <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ CSV/TSV (.csv, .tsv, .tab)</li>
                <li>‚Ä¢ JSON/JSON-LD (.json, .jsonld)</li>
                <li>‚Ä¢ XML (.xml)</li>
                <li>‚Ä¢ YAML (.yaml, .yml)</li>
                <li>‚Ä¢ TOML (.toml)</li>
                <li>‚Ä¢ LOG (.log)</li>
                <li>‚Ä¢ INI/CFG (.ini, .cfg, .conf)</li>
              </ul>
            </div>

                          {/* Spreadsheet Formats */}
              <div className="bg-card rounded-lg p-6 shadow-sm border border-border">
                <div className="flex items-center mb-4">
                  <BarChart3 className="h-6 w-6 text-success-600 mr-3" />
                  <h3 className="text-lg font-semibold text-foreground">–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ</h3>
                </div>
                <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ Excel (.xlsx, .xls, .xlsm)</li>
                <li>‚Ä¢ Google Sheets (—á–µ—Ä–µ–∑ CSV)</li>
                <li>‚Ä¢ LibreOffice Calc</li>
                <li>‚Ä¢ Numbers (Mac)</li>
              </ul>
            </div>

                          {/* Data Science Formats */}
              <div className="bg-card rounded-lg p-6 shadow-sm border border-border">
                <div className="flex items-center mb-4">
                  <Database className="h-6 w-6 text-info-600 mr-3" />
                  <h3 className="text-lg font-semibold text-foreground">Data Science</h3>
                </div>
                <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ Parquet (.parquet)</li>
                <li>‚Ä¢ NumPy (.npz, .npy)</li>
                <li>‚Ä¢ Pickle (.pkl, .pickle)</li>
                <li>‚Ä¢ HDF5 (.h5, .hdf5)</li>
                <li>‚Ä¢ Feather (.feather)</li>
                <li>‚Ä¢ Arrow (.arrow)</li>
                <li>‚Ä¢ Avro (.avro)</li>
                <li>‚Ä¢ ORC (.orc)</li>
              </ul>
            </div>

                          {/* Compressed Formats */}
              <div className="bg-card rounded-lg p-6 shadow-sm border border-border">
                <div className="flex items-center mb-4">
                  <Zap className="h-6 w-6 text-warning-600 mr-3" />
                  <h3 className="text-lg font-semibold text-foreground">–°—Ç–∏—Å–Ω–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏</h3>
                </div>
                <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ GZIP (.gz, .gzip)</li>
                <li>‚Ä¢ ZIP (.zip)</li>
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è</li>
                <li>‚Ä¢ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É</li>
              </ul>
            </div>
          </div>

          <div className="text-center mt-8">
            <Button
              variant="outline"
              size="lg"
              onClick={() => window.open('./FORMATS.md', '_blank')}
              className="bg-card hover:bg-muted"
            >
              <BookOpen className="h-5 w-5 mr-2" />
              –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
            </Button>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="bg-background/80 backdrop-blur-sm border-t border-border transition-all duration-300">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-foreground mb-4">
              üöÄ Why Choose DataViz AI Playground?
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mt-8">
              <div className="text-center">
                <div className="bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Brain className="h-8 w-8 text-primary" />
                </div>
                <h3 className="text-lg font-semibold text-foreground mb-2">AI-Powered Analysis</h3>
                <p className="text-muted-foreground">
                  Intelligent data analysis with automatic chart recommendations and statistical insights.
                </p>
              </div>
              
              <div className="text-center">
                <div className="bg-success/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Database className="h-8 w-8 text-success-600" />
                </div>
                <h3 className="text-lg font-semibold text-foreground mb-2">Universal Format Support</h3>
                <p className="text-muted-foreground">
                  Import from CSV, TSV, Excel, JSON, XML, YAML, TOML, LOG, Parquet, NumPy, and more.
                </p>
              </div>
              
              <div className="text-center">
                <div className="bg-info/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Download className="h-8 w-8 text-info-600" />
                </div>
                <h3 className="text-lg font-semibold text-foreground mb-2">Code Export</h3>
                <p className="text-muted-foreground">
                  Export visualizations as production-ready Python (Plotly, Matplotlib) or R (ggplot2, Plotly) code.
                </p>
              </div>
              
              <div className="text-center">
                <div className="bg-warning/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                  <BarChart3 className="h-8 w-8 text-warning-600" />
                </div>
                <h3 className="text-lg font-semibold text-foreground mb-2">Advanced Charts</h3>
                <p className="text-muted-foreground">
                  16+ chart types including histograms, heatmaps, radar charts, and more with interactive features.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
