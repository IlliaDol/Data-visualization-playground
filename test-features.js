// –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π DataViz AI

// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
const testData = [
  { category: 'A', value: 10, date: '2023-01-01', region: 'North' },
  { category: 'B', value: 20, date: '2023-01-02', region: 'South' },
  { category: 'C', value: 15, date: '2023-01-03', region: 'East' },
  { category: 'A', value: 25, date: '2023-01-04', region: 'West' },
  { category: 'B', value: 30, date: '2023-01-05', region: 'North' }
];

// –¢–µ—Å—Ç ChartSpec
const testChartSpec = {
  version: '1',
  data: { values: testData },
  encoding: {
    x: { field: 'category', type: 'nominal' },
    y: { field: 'value', type: 'quantitative' },
    color: { field: 'region', type: 'nominal' }
  },
  mark: 'bar',
  title: '–¢–µ—Å—Ç–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫',
  meta: {
    createdAt: new Date().toISOString(),
    prompt: '–ü–æ–∫–∞–∂–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –∑–Ω–∞—á–µ–Ω—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö'
  }
};

// –¢–µ—Å—Ç permalink
function testPermalink() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Permalink...');
  
  try {
    // –°–∏–º—É–ª—é—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
    const state = {
      chartSpec: testChartSpec,
      meta: {
        originalDatasetHash: 'test-hash',
        createdAt: new Date().toISOString(),
        prompt: '–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç'
      }
    };
    
    const json = JSON.stringify(state);
    const compressed = btoa(json); // –ü—Ä–æ—Å—Ç–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É
    
    console.log('‚úÖ Permalink —Å—Ç–≤–æ—Ä–µ–Ω–æ:', `http://localhost:3000/q?s=${compressed}`);
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Permalink:', error);
    return false;
  }
}

// –¢–µ—Å—Ç Data Cleaner
function testDataCleaner() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Data Cleaner...');
  
  const dirtyData = [
    { name: '  John  ', age: '25', salary: '1,500.50', date: '01/15/2023' },
    { name: 'Jane', age: '30', salary: '2,000.00', date: '02/20/2023' },
    { name: 'Bob', age: '35', salary: '1,750.25', date: '03/10/2023' },
    { name: '  John  ', age: '25', salary: '1,500.50', date: '01/15/2023' } // –î—É–±–ª—ñ–∫–∞—Ç
  ];
  
  console.log('üìä –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ:', dirtyData.length, '—Ä—è–¥–∫—ñ–≤');
  console.log('üîç –ü—Ä–æ–±–ª–µ–º–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ:');
  console.log('  - –ó–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –≤ —ñ–º–µ–Ω–∞—Ö');
  console.log('  - –ß–∏—Å–ª–∞ –∑ –∫–æ–º–∞–º–∏');
  console.log('  - –î–∞—Ç–∏ –≤ –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ');
  console.log('  - –î—É–±–ª—ñ–∫–∞—Ç–∏');
  
  // –°–∏–º—É–ª—é—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è
  const cleanedData = dirtyData.map(row => ({
    name: row.name.trim(),
    age: parseInt(row.age),
    salary: parseFloat(row.salary.replace(',', '')),
    date: new Date(row.date).toISOString().split('T')[0]
  })).filter((row, index, arr) => 
    arr.findIndex(r => JSON.stringify(r) === JSON.stringify(row)) === index
  );
  
  console.log('‚úÖ –û—á–∏—â–µ–Ω—ñ –¥–∞–Ω—ñ:', cleanedData.length, '—Ä—è–¥–∫—ñ–≤');
  console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—â–µ–Ω–Ω—è:', cleanedData);
  return true;
}

// –¢–µ—Å—Ç NLQ
function testNLQ() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è NLQ...');
  
  const prompts = [
    '–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–¥–∞–∂—ñ –ø–æ –º—ñ—Å—è—Ü—è—Ö',
    '–°—Ç–≤–æ—Ä–∏ –¥—ñ–∞–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤—ñ–∫—É',
    '–í—ñ–∑—É–∞–ª—ñ–∑—É–π –∫–æ—Ä–µ–ª—è—Ü—ñ—é –º—ñ–∂ –¥–æ—Ö–æ–¥–∞–º–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏',
    '–ü–æ–∫–∞–∂–∏ —Ç—Ä–µ–Ω–¥ –∑–∞ —á–∞—Å–æ–º'
  ];
  
  prompts.forEach(prompt => {
    const lowerPrompt = prompt.toLowerCase();
    let chartType = 'bar';
    
    if (lowerPrompt.includes('—Ç—Ä–µ–Ω–¥') || lowerPrompt.includes('—á–∞—Å')) {
      chartType = 'line';
    } else if (lowerPrompt.includes('–∫–æ—Ä–µ–ª—è—Ü—ñ—è')) {
      chartType = 'point';
    } else if (lowerPrompt.includes('—Ä–æ–∑–ø–æ–¥—ñ–ª')) {
      chartType = 'bar';
    }
    
    console.log(`üìù "${prompt}" ‚Üí ${chartType.toUpperCase()} –≥—Ä–∞—Ñ—ñ–∫`);
  });
  
  return true;
}

// –¢–µ—Å—Ç Chrome Extension
function testChromeExtension() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Chrome Extension...');
  
  const mockTable = `
    <table>
      <tr><th>Name</th><th>Age</th><th>Salary</th></tr>
      <tr><td>John</td><td>25</td><td>1500</td></tr>
      <tr><td>Jane</td><td>30</td><td>2000</td></tr>
      <tr><td>Bob</td><td>35</td><td>1750</td></tr>
    </table>
  `;
  
  console.log('üìã HTML —Ç–∞–±–ª–∏—Ü—è –≤–∏—è–≤–ª–µ–Ω–∞');
  console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ JSON...');
  
  const extractedData = [
    { Name: 'John', Age: '25', Salary: '1500' },
    { Name: 'Jane', Age: '30', Salary: '2000' },
    { Name: 'Bob', Age: '35', Salary: '1750' }
  ];
  
  console.log('‚úÖ –î–∞–Ω—ñ –≤–∏—Ç—è–≥–Ω—É—Ç–æ:', extractedData.length, '—Ä—è–¥–∫—ñ–≤');
  console.log('üîó URL –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É: http://localhost:3000/import?s=...');
  
  return true;
}

// –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π DataViz AI\n');
  
  const tests = [
    { name: 'Permalink', fn: testPermalink },
    { name: 'Data Cleaner', fn: testDataCleaner },
    { name: 'NLQ', fn: testNLQ },
    { name: 'Chrome Extension', fn: testChromeExtension }
  ];
  
  let passed = 0;
  let total = tests.length;
  
  tests.forEach(test => {
    console.log(`\n--- ${test.name} ---`);
    try {
      if (test.fn()) {
        passed++;
        console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù–û`);
      } else {
        console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù–û`);
      }
    } catch (error) {
      console.log(`‚ùå ${test.name}: –ü–û–ú–ò–õ–ö–ê -`, error.message);
    }
  });
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: ${passed}/${total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (passed === total) {
    console.log('üéâ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏');
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
if (typeof window !== 'undefined') {
  window.testDataVizFeatures = runAllTests;
  console.log('üß™ –¢–µ—Å—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –í–∏–∫–æ–Ω–∞–π—Ç–µ: testDataVizFeatures()');
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    testPermalink,
    testDataCleaner,
    testNLQ,
    testChromeExtension,
    runAllTests,
    testData,
    testChartSpec
  };
}
